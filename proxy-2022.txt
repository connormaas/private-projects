Introduction: A web proxy is the "middle-man" between a client and server. To the client, it acts as a server by interpreting requests and returning 
responses. Conversely, to the server, it acts as a client by generating requests and read back server responses.

High Level Overview: 
1. Open up a socket which listens for a client
2. Use threads for each new client
3. Read request from client
4. Search the cache (a library which functions as a cache and is shared between all threads). If present, write this response to the client and skip 5-7.
5. Write the client's request to the server
6. Read the server's response and cache it
7. Write the response back to the client

Details:
- The proxy is able to read and write both binary and text data
- The proxy is able to handle requests concurrently from different clients
- The proxy only handles HTTP requests
- The proxy accepts HTTP/1.0 and HTTP/1.1, but forwards all requests as HTTP/1.0
- The proxy has proper error checking and will not exit the program when errors arise
- The proxy uses a cache (shared with all threads) which stores server responses using client requests as "keys". The proxy uses mutexes to prevent data 
races and other data sharing issues. ** Particularly, see the information on incrementing and decrementing reference count. ** See cache.h for more 
details.
- The proxy makes use of a robust I/O package defined in csapp.h for reading and writing data

For implementation specifics, see: https://github.com/connormaas/proxy-2022
