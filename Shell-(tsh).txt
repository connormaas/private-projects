A fully functional command-line shell which constantly interprets the user's inputs, running both builtin and user-driven commands (depending on the user's 
requests). This shell supports several builtin commands, process execution, and IO redirection.

Creating processes
- A user may simply enter an executable that they wish to run, and if the file is reachable, the process will immediately begin taking place.
- If the '&' operator is added to the end of the line with a space in between, the process will run in the background and the user may still work with the 
shell, as well as run more executables.
- If the '&' operator is not added, the process will run in the foreground. This can be terminated or stopped using ctrl-c or ctrl-z respectively 
(mentioned in next section).

Details:
- Each job being executed has a process ID (PID) and a job ID (JID), which is unique to that process. This is used for identification and further 
manipulation of processes.
- Each child process is given its own process group, so when signals are forwarded to that process group, it will not interfere with the parent process. 
Specifically, this is necessary because otherwise these signals would be sent back to the original shell (parent), as well as every process created by it.
- When a background process begins, its JID and PID as well as the command line which invoked the execution are nicely displayed.
- The user typing 'ctrl-c' will terminate the execution of the foreground group.
- The user typing 'ctrl-z' will stop the execution of the foreground group.
- Children are properly reaped using a signal handler. The signal handler is able to deal with multiple terminated children despite receiving just one 
signal.
- During a foreground process, background processes that terminate do not become zombies, as signals are constantly handled concurrently with process 
execution.

Built-in commands:
- quit: terminates the shell.
- jobs: lists all background jobs.
- bg job: resumes job by sending it a SIGCONT signal, and then runs it in the background. The job argument can be either a PID or JID.
- fg job: command resumes job by sending it a SIGCONT signal, and then runs it in the foreground. The job argument can be either a PID or a JID.

IO redirection:
- The operators '<' (input) and '>' (output) proceed the name of the file to which the input or output will be redirected.
- The default input and output are standard input and output respectively.
- Users may redirect output to any valid file which they have permission to write to.
- If a request is made to write to a file that doesn't exist, a new file will be created with the same name and that file will be written to instead.
- Output can also be redirected from builtin commands, such as the jobs command, which lists the background jobs as described in the previous section.
- Users may redirect input to any valid file which they have permission to read from. The file itself must exist or the process will be terminated.

Error handling:
- Error handling has been carefully constructed to make that invalid or extraneous inputs will not be able to break the shell.
- Please see the function descriptions in this file for more details on error handling specifics.

For implementation specifics, see: https://github.com/connormaas/tsh-shell
